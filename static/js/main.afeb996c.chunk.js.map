{"version":3,"sources":["serviceWorker.ts","GiftWrappingView.tsx","GiftWrappingContainer.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","GiftWrappingView","points","isRunning","currentVertex","nextVertex","checking","hull","getLinePath","width","height","Point","point","cx","x","fill","cy","y","r","props","viewBox","children","map","index","key","strokeWidth","stroke","x1","y1","x2","y2","opacity","d","GiftWrappingContainer","innerWidth","innerHeight","padding","numberOfPoints","useState","Array","getRandomNumber","sort","a","b","leftMost","setCurrentVertex","setHull","setNextVertex","setIndex","setIsRunning","setChecking","min","max","Math","random","addVertexToHull","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","v1","v2","checkPoint","length","p","firstPoint","buffer","i","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afeb996c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport {Point} from \"./types\";\n\ninterface GiftWrappingViewProps {\n    points: Point[],\n    isRunning: boolean,\n    currentVertex: Point,\n    nextVertex: Point,\n    checking: Point,\n    hull: Point[],\n    getLinePath: any,\n    width: number,\n    height: number\n}\n\nconst GiftWrappingView = ({points, isRunning, currentVertex, nextVertex, checking, hull, getLinePath, width, height}: GiftWrappingViewProps) => {\n\n    const Point = ({point}: { point: Point }) =>\n        <circle cx={point.x}\n                fill={'white'} cy={point.y}\n                r={5}/>;\n\n    const Points = () => <g>{points.map((point, index) => <Point point={point} key={index}/>)}</g>;\n\n    const Lines = () => {\n        if (isRunning) {\n            return <g>\n                <line strokeWidth={2} stroke={'green'} x1={currentVertex.x} y1={currentVertex.y} x2={nextVertex.x}\n                      y2={nextVertex.y}/>\n                <line strokeWidth={2} stroke={'white'} x1={currentVertex.x} y1={currentVertex.y} x2={checking.x}\n                      y2={checking.y}/>\n            </g>\n        } else {\n            return null;\n        }\n    };\n\n    const HullPath = () => <path opacity={0.2} fill={'lavender'} d={getLinePath(hull)} strokeWidth={10}\n                                 stroke={'blue'}/>;\n\n    const Wrapper = (props: any) => <svg viewBox={`0 0 ${width} ${height}`}>{props.children}</svg>;\n\n    return (\n        <Wrapper>\n            <Points/>\n            <Lines/>\n            <HullPath/>\n        </Wrapper>\n    );\n};\n\nexport default GiftWrappingView;\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport {clearInterval, setInterval} from \"timers\";\r\nimport GiftWrappingView from \"./GiftWrappingView\";\r\nimport {Point} from \"./types\";\r\n\r\nconst GiftWrappingContainer: React.FC = () => {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    const padding = 50;\r\n    const delay = 100;\r\n    const numberOfPoints = 50;\r\n\r\n    const [points, setPoints] = useState<Point[]>(getRandomPos());\r\n    const [leftMost, setLeftMost] = useState<Point>(findLeftMost());\r\n    const [currentVertex, setCurrentVertex] = useState<Point>(leftMost);\r\n    const [hull, setHull] = useState<Point[]>([currentVertex]);\r\n    const [nextVertex, setNextVertex] = useState<Point>(points[1]);\r\n    const [index, setIndex] = useState<number>(2);\r\n    const [isRunning, setIsRunning] = useState(true);\r\n    const [checking, setChecking] = useState(points[index]);\r\n\r\n    useInterval(() => update(), isRunning ? delay : null);\r\n\r\n    function useInterval(callback: any, delay: any) {\r\n        const savedCallback = useRef();\r\n        useEffect(() => {\r\n            savedCallback.current = callback;\r\n        }, [callback]);\r\n\r\n        useEffect(() => {\r\n            function tick() {\r\n                (savedCallback as any).current();\r\n            }\r\n\r\n            if (delay !== null) {\r\n                let id = setInterval(tick, delay);\r\n                return () => clearInterval(id);\r\n            }\r\n        }, [delay]);\r\n    }\r\n\r\n    function findLeftMost(): Point {\r\n        const sortedPoints = points.sort((a, b) => a.x - b.x);\r\n        return sortedPoints[0];\r\n    }\r\n\r\n    function getRandomPos(): Point[] {\r\n        return Array(numberOfPoints).fill(0).map(() => {\r\n            return {\r\n                x: getRandomNumber(padding, width - padding),\r\n                y: getRandomNumber(padding, height - padding)\r\n            }\r\n        });\r\n    }\r\n\r\n    function getRandomNumber(min: number, max: number): number {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n\r\n    function getCrossProduct(v1: Point, v2: Point): number {\r\n        return v1.x * v2.y - v1.y * v2.x;\r\n    }\r\n\r\n    function getLinePath(p: Point[]): string {\r\n        const firstPoint = `M${p[0].x},${p[0].y}`;\r\n        let buffer = ``;\r\n        for (let i = 1; i < p.length; i++) {\r\n            buffer += `L${p[i].x},${p[i].y}`;\r\n        }\r\n        return `${firstPoint}${buffer}`;\r\n    }\r\n\r\n    function checkPoint() {\r\n        if (points[index]) {\r\n            setChecking(points[index]);\r\n            const a = {x: nextVertex.x - currentVertex.x, y: nextVertex.y - currentVertex.y};\r\n            const b = {x: checking.x - currentVertex.x, y: checking.y - currentVertex.y};\r\n            const cross = getCrossProduct(a, b);\r\n            cross < 0 && setNextVertex(checking);\r\n        }\r\n    }\r\n\r\n    function update() {\r\n        checkPoint();\r\n        setIndex(index + 1);\r\n        if (index === points.length) {\r\n            if (nextVertex === leftMost) {\r\n                setIsRunning(false);\r\n                addVertexToHull();\r\n            } else {\r\n                addVertexToHull();\r\n            }\r\n        }\r\n    }\r\n\r\n    function addVertexToHull() {\r\n        setHull([...hull, nextVertex]);\r\n        setCurrentVertex(nextVertex);\r\n        setIndex(0);\r\n        setNextVertex(leftMost);\r\n    }\r\n\r\n    return <GiftWrappingView points={points} checking={checking} currentVertex={currentVertex} getLinePath={getLinePath}\r\n                             hull={hull} isRunning={isRunning} nextVertex={nextVertex} width={width} height={height}/>\r\n};\r\n\r\nexport default GiftWrappingContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport GiftWrappingContainer from \"./GiftWrappingContainer\";\n\nReactDOM.render(<GiftWrappingContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}